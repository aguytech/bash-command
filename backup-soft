#!/bin/bash
#
# Provides:                 backup-soft
# Short-Description:        export selected installed softwares to backup path
# Description:              export selected installed softwares to backup path

################################ GLOBAL FUNCTIONS
#S_TRACE=debug

S_GLOBAL_FUNCTIONS="${S_GLOBAL_FUNCTIONS:-/usr/local/bs/inc-functions}"

! [ -f "$S_GLOBAL_FUNCTIONS" ] && echo -e "\e[1;31merror - unable to find file '$S_GLOBAL_FUNCTIONS' from '${BASH_SOURCE[0]}'\e[0;0m" && exit 1
. "$S_GLOBAL_FUNCTIONS"

################################  HELP

usage="Usage: backup-soft [OPTION]... [FILE]...
backup default softwares define in the script

	[FILE]               replace default software definition by the files definition to backup(restore)
	-a,  --add           this options add softwares definitions from FILE to default one

	-i,  --initial       restore to inital name not with keep[date] format
	-r,  --restore       only restore initial softwares, in place of backup
	-R,  --restore-after retore initial softwares after backup
"


################################  FUNCTION

# initialize default paths to backup
_init() {

	# connectors
	_paths_soft[".connectors"]="comp_path_opt=/opt/.connectors"

	# sublime-text
	_paths_soft["sublime_text_${_SUBLIMETEXT_VER}"]="path_user=$HOME
comp_path_opt=/opt/sublime_text
comp_path_conf=$HOME/.config/sublime-text-3
comp_path_proj=$HOME/.sublime-project
comp_file_desk=$HOME/.local/share/applications/sublime-text.desktop
file_exec=/opt/sublime_text/sublime_text
file_bin=/usr/bin/sublime-text"

	# eclipse
	_paths_soft["eclipse_${_ECLIPSE_THEME}_${_ECLIPSE_VER}"]="path_user=$HOME
comp_path_opt=/opt/eclipse_${_ECLIPSE_THEME}_${_ECLIPSE_VER}
comp_path_conf=$HOME/.eclipse
comp_path_proj=$HOME/dev/eclipse-workspaces
comp_file_desk=$HOME/.local/share/applications/eclipse.desktop
file_exec=/opt/eclipse_${_ECLIPSE_THEME}_${_ECLIPSE_VER}/eclipse
file_bin=/usr/bin/eclipse"

	# squirrel-sql
	_paths_soft["squirrel-sql_${_SQUIRREL_VER}"]="path_user=$HOME
comp_path_opt=/opt/squirrel-sql_${_SQUIRREL_VER}
comp_path_conf=$HOME/.eclipse
comp_file_desk=$HOME/.local/share/applications/squirrel-sql.desktop
file_exec=/opt/squirrel-sql_${_SQUIRREL_VER}/squirrel-sql.sh
file_bin=/usr/bin/squirrel-sql"

	# smargit
	_paths_soft["smartgit_${_SMARTGIT_VER}"]="path_user=$HOME
comp_path_opt=/opt/smartgit_${_SMARTGIT_VER}
comp_path_conf=$HOME/.eclipse
comp_file_desk=$HOME/.local/share/applications/smartgit.desktop
file_exec=/opt/smartgit_${_SMARTGIT_VER}/bin/smartgit.sh
file_bin=/usr/bin/smartgit"

}

_backup_one() {
	_echoT "--> backup $1"

	# create list of paths to compress
	paths_comp="$(sed -n 's|^comp_.*=\(.*\)$|\1|p' <<< ${2})"
	# file to compress paths
	file_to="${path_backup_base}/${1}${suffix}.${tar_ext}"

	# test paths to compress
	while read path; do
		[ -e "${path}" ] && _echo "$path" || _echoE "warning - skipped, unable to find '${path}'"
	done <<< "$paths_comp"

	_echo "--> ${file_to}"

	# existing compressed file
	[ -e "$file_to" ] && _echoE "warning - overwrite file '$file_to'"
	cmd="sudo tar ${tar_opt_comp} '$file_to' ${paths_comp} 2>&6"
	_eval $cmd || _exite "executing '$cmd'"
	_eval sudo chown ${USER}:${USER} "${file_to}"
}

_backup() {
	_echoT "BACKUP to ${path_backup_base}"

	# load existing file of software definition
	for file in $*; do
		! [ -f "$file" ] && _echoE "warning - skipped, unable to find '${file}'"
		. $file
	done

	# COMP PRE

	# COMP EXE
	for soft in ${!_paths_soft[*]}; do
		_backup_one "$soft" "${_paths_soft[$soft]}"
	done

	# COMP POST

	_echoT "BACKUP end"
}

_restore_one() {
	_echoT "<-- restore $1"

	# define variables contained in definition
	eval "${2}"
	# create list of paths to decompress, home user are replaced by current one
	paths_comp="$(sed -n 's|^comp_.*=\(.*\)$|\1|p' <<< "${2}")"
	# create a variables incluse in compressed files
	vars="$(grep -o '^[^=]\+' <<< "${2}" | xargs)"
	# file to decompress
	file_from="${path_backup_base}/${1}.${tar_ext}"

	# create path_tmp
	! [ -e "$path_tmp" ] && _eval sudo mkdir -p "$path_tmp"

	# test existence of file to decompress
	! [ -e "$file_from" ] && _exite "unable to find '$file_from'"

	# decompress
	cmd="sudo tar ${tar_opt_uncomp} '$file_from' -C ${path_tmp}"
	_eval $cmd || _exite "executing '$cmd'"

	# test & clean destination paths
	while read path; do
		# define paths
		path_from=${path_tmp}/${path#/}
		path_to=${path%/}
		# rename path
		[ -n "$path_user" ] && path_to=${path/#$path_user/$HOME}

		# test & delete existing path_to
		if [ -e "${path_to}" ]; then
			_echo "delete - '${path_to}'"
			_eval sudo rm -fR "${path_to}"
		fi
		# move path
		cmd="sudo mv ${path_from} ${path_to}"
		_eval $cmd || _exite "executing '$cmd'"

		# clean temporary path
	done <<< "$paths_comp"

	# bind command
	if [[ " $vars " = *" file_exec "* && " $vars " = *" file_bin "* ]]; then
		_echo "bind '$file_bin'"
		( [ -h "$file_bin" ] || [ -e "$file_bin" ] ) && sudo rm "$file_bin"
		sudo ln -s "$file_exec" "$file_bin"
	fi

	# clean path_tmp
	[ -e "$path_tmp" ] && _eval sudo rm -fR "$path_tmp"
}

_restore() {
	_echoT "RESTORE from ${path_backup_base}"

	# load existing file of software definition
	for file in $*; do
		! [ -f "$file" ] && _echoE "warning - skipped, unable to find '${file}'"
		. $file
	done

	# RESTORE PRE

	# RESTORE EXE
	for soft in ${!_paths_soft[*]}; do
		_restore_one "$soft" "${_paths_soft[$soft]}"
	done

	# RESTORE POST

	_echoT "BACKUP end"
}


################################  REQUIRE

# require files
file="/etc/server/install.conf"
! [ -f "$file" ] && _echoE "error - unable to load file: ${file}" && _exit 1
. $file


################################  DATA

# array for softwares definition
declare -A _paths_soft
# path to backup/resore
path_backup_base="$HOME/Soft/multi"
# temporary path to decompress
path_tmp="/tmp/${_SCRIPT}.$(date +%s)"
# tar options
tar_opt_comp="--exclude='.cache' -czf"
tar_opt_uncomp="-xzf"
tar_ext="tar.gz"
# suffix of file name to backup
suffix=".keep$(date +%s)"
# default actions
actions=backup


################################  MAIN

_echoD "$FUNCNAME:$LINENO - $(date +"%d-%m-%Y %T : %N") ---- start"

opts_given="$@"
opts_short="hairR"
opts_long="help,add,initial,restore,restore-after"
opts="$(getopt -o $opts_short -l $opts_long -n "${0##*/}" -- $* 2>/tmp/${0##*/})" || _exite "$(</tmp/${0##*/})"
eval set -- $opts

_echoD "$FUNCNAME:$LINENO opts='$opts' opts_given='$opts_given'"
while :; do
	_echoD "$FUNCNAME:$LINENO 1='$1' \$*='$*' \$@='$@'"
	case "$1" in
		-h|--help)
			_echo "$usage"
			_exit
			;;
		-i|--initial)
			suffix=
			;;
		-a|--add)
			add=
			;;
		-r|--restore)
			actions="restore";
			;;
		-R|--restore-after)
			actions="backup restore";
			;;
		--)
			shift
			opts="$*"
			break
			;;
	esac
	shift
done
_echoD "$FUNCNAME:$LINENO actions='$actions' suffix='$suffix' opts='$opts'"

# test path to backup/restore
if ! [ -d ${path_backup} ]; then
	(sudo mkdir -p ${path_backup} && sudo chown 1000:1000 ${path_backup}) || _exite "unable to create/modify rights to directory '${path_backup}'"
fi

# initialize default softwares definition
( [ -z "$opts" ] || ( [ "$opts" ] && [ "${add+x}" ] ) ) && _init

# launch actions
for action in $actions; do
	_$action $opts
done

_exit 0
