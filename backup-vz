#!/bin/bash
#
# Provides:             backup-vz
# Short-Description:    backup vz configuration, dump & templates
# Description:          backup vz configuration, dump & templates

################################ GLOBAL FUNCTIONS
#S_TRACE=debug

S_GLOBAL_FUNCTIONS="${S_GLOBAL_FUNCTIONS:-/usr/local/bs/inc-functions}"

! [ -f "$S_GLOBAL_FUNCTIONS" ] && echo -e "\e[1;31merror - unable to find file '$S_GLOBAL_FUNCTIONS' from '${BASH_SOURCE[0]}'\e[0;0m" && exit 1
. "$S_GLOBAL_FUNCTIONS"

################################  VARIABLES

usage="backup-vz : backup vz configuration, dump & templates.
Default backup all, equivalent to -ctduosl
Use other options for a selected save
backup-vz --help

options:
    -c, --conf          save only vz configuration files
    -t, --template      save only vz templates
    -d, --dump          save only vz dumps
    -u, --suspend       save only vz suspend
    -o, --snapshot      save only vz snapshot
    -s, --share         save only /var/lib/vz/share
    -l, --log           save only /var/lib/vz/node/*/log
    -q, --quiet         don't show any infomations except interaction informations
    --debug             output in screen & in file debug informations
"


################################################################  _SCRIPT

# compress path
# $1 path base
# $2 sub path
__compress() {
	local path_from="$1"
	local path_subs="$2"
	local path_to

	path_to="${path_from#/}"; path_to="${path_save}/${path_to//\//.}"; path_to="${path_to%/}"
	_echoD "$FUNCNAME:$LINENO path_from='$path_from' path_subs='$path_subs' path_to='$path_to'"

	# wrong path
	! [ -d "$path_from" ] && _exite "Wrong path '$path_from' for calling '$*'"

	# create path
	! [ -d "$path_to" ] && mkdir -p "$path_to"

	cd "$path_from"
	_echoT "$PWD"

	path_subs=$(echo "$path_subs")

	for path_sub in $path_subs
	do
		if [ -d "$path_sub" ]; then
			file2="${path_sub#/}"
			file2="${file2//\//.}"
			file2="$path_to/${file2%/}.$comp_ext"

			_echo "compress $path_sub"
			_evalq "tar $comp_opt $file2 $path_sub"
		else
			_echoE "wrong path '$path_sub'"
			_echoD "$FUNCNAME:$LINENO ERROR| Wrong path '$path_sub'"
		fi
	done
}

# synchronize files
# $1 path base
# $2 sub path
# $3 exclude path
__sync() {
	local path_from="$1"
	local path_subs="$2"
	local excludes="lost+found $3"
	local path_to="${path_from#/}"

	path_to="${path_save}/${path_to//\//.}"; path_to="${path_to%/}"
	_echoD "$FUNCNAME:$LINENO path_from='$path_from' path_subs='$path_subs' path_to='$path_to'"

	# wrong path
	! [ -d "$path_from" ] && _exite "Wrong path '$path_from' for calling '$*'"

	# create path
	! [ -d "$path_to" ] && mkdir -p "$path_to"

	cd "$path_to"
	_echoT "$PWD"

	for path_sub in $path_subs
	do
		if [ -d "$path_from/$path_sub" ]; then
			path_sub_to="${path_to}/${path_sub#/}"
			! [ -d "$path_sub_to" ] && mkdir -p "$path_sub_to"

			str=; for exclude in $excludes; do str+=" --exclude='$exclude'"; done
			_echo "sync $path_sub"
			_evalq "rsync -a $str $path_from/$path_sub/ $path_sub_to/"
		else
			_echoE "wrong path '$path_from/$path_sub'"
			_echoD "$FUNCNAME:$LINENO ERROR| Wrong path '$path_from/$path_sub'"
		fi
	done
}


__comp_share() {
	local paths path

	# all paths except mariadb & www
	paths=`ls "${S_HOSTING_PATH_SHARE}"|grep -v mariadb|grep -v www`
	for path in ${paths}; do
		__compress "${S_HOSTING_PATH_SHARE}" "${path}"
	done
	# for mariadb & www
	#_echoT "STOP CONTAINER FROM 101 to 199"
	#vz-ctl stop 101-199
	#_echoT "Container stopped"
	for path in www; do
		[ -d "${S_HOSTING_PATH_SHARE}/${path}" ] && __compress "${S_HOSTING_PATH_SHARE}/${path}" "*"
	done
	#_echoT "START CONTAINER FROM 101 to 199"
	#vz-ctl start 101-199
	#_echoT "Container started"
}


################################  MAIN

_echoD "$FUNCNAME:$LINENO $_SCRIPT / $(date +"%d-%m-%Y %T : %N") ---- start"

path_save="$S_PATH_SAVE_BACKUP/$DDATE/vz"
comp_opt=czf
comp_ext=tgz

opts_given="$@"
opts_short="cdloqstu"
opts_long="help,debug,conf,dump,log,snapshot,quiet,share,template,suspend"
OPTS=$(getopt -o $opts_short -l $opts_long -n "${0##*/}" -- "$@" 2>/tmp/${0##*/}) || _exite "wrong options '$(</tmp/${0##*/})'"
eval set -- "$OPTS"

_echoD "$FUNCNAME:$LINENO opts_given='$opts_given' OPTS='$OPTS'"
while true; do
	case "$1" in
		--help)
			_echo "$usage"; _exit
			;;
		--debug)
			_redirect debug
			;;
		-c|--conf)
			conf=c
			;;
		-d|--dump)
			dump=d
			;;
		-l|--log)
			log=l
			;;
		-o|--snapshot)
			snapshot=o
			;;
		-q|--quiet)
			_redirect quiet
			;;
		-s|--share)
			share=s
			;;
		-t|--template)
			template=t
			;;
		-u|--suspend)
			suspend=u
			;;
		--)
			shift
			break
			;;
		*)
			_exite "Bad options: '$1' in '$opts_given'"
			;;
	esac
	shift
done

# all options
# ; log=l
if ! [ "$opts_given" ]; then conf=c; template=t; dump=d; suspend=u; snapshot=o; share=s; fi
_echoD "$FUNCNAME:$LINENO conf='$conf' template='$template' dump='$dump' suspend='$suspend' snapshot='$snapshot' share='$share' log='$log'"

# dump all containers, force to stop if not
vz-dump -cyf all

# conf
[ "$conf" ] && __compress "/" "etc/vz etc root/.ssh root"

# log
[ "$log" ] && __compress "$S_VZ_PATH_NODE" "*/log"

# dump
[ "$dump" ] && __sync "$S_HOSTING_PATH" "dump" "/suspend /snapshot /template"

# template
[ "$template" ] && __sync "$S_VZ_PATH_DUMP" "template"

# suspend
[ "$suspend" ] && __sync "$S_VZ_PATH_DUMP" "suspend"

# snapshot
[ "$snapshot" ] && __sync "$S_VZ_PATH_DUMP" "snapshot"

# share
[ "$share" ] && __comp_share

_exit 0
